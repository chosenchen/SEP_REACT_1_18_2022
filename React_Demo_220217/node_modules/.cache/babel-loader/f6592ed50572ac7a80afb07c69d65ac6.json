{"ast":null,"code":"import React from \"react\";\nimport MyReact from \"./MyReact\"; //Virtual DOM is JS object that helps you to update real DOM\n\nconst render = function (currentElement, parentElement) {\n  if (typeof currentElement === 'string' || typeof currentElement === 'number') {\n    const currentTextNode = document.createTextNode(currentElement);\n    parentElement.appendChild(currentTextNode);\n    return;\n  }\n\n  if (currentElement.type.prototype instanceof MyReact.Component) {\n    console.log(currentElement.type.prototype instanceof MyReact.Component); // check if currentElement is the instance of React.Component\n\n    const curInstance = new currentElement.type(currentElement.props); // currentElement.type() is a class, add new at the beginning is instance // Invoking the constructor//Sending the props to currentElement\n\n    curInstance.parentDomElement = parentElement;\n    const renderElement = curInstance.render();\n    render(renderElement, parentElement); //Do recursion\n\n    return;\n  }\n\n  const cur = document.createElement(currentElement.type);\n  Object.keys(currentElement.props).forEach(key => {\n    if (key === 'style') {\n      Object.keys(currentElement.props[key]).forEach(styleProp => {\n        cur.style[styleProp] = currentElement.props[key][styleProp];\n      });\n    } else if (key === 'id') {\n      cur.setAttribute(key, currentElement.props[key]);\n    } else if (key === 'className') {\n      //add the value to the className\n      cur.classList.add(currentElement.props[key]); // key is variable \n    } else if (key.startsWith(\"on\")) {\n      let curEvent = key.substring(2).toLowerCase(); //cur.addEventListener(key.substring(2).toLowerCase(), )\n\n      cur.addEventListener(curEvent, currentElement.props[key]);\n    } else if (key === 'children') {\n      const curchildren = currentElement.props[key];\n\n      if (Array.isArray(curchildren)) {\n        curchildren.forEach(element => {\n          render(element, cur);\n        });\n      } else if (typeof curchildren === 'string') {\n        const currentTextNode = document.createTextNode(curchildren);\n        cur.appendChild(currentTextNode);\n      } else {\n        render(curchildren, cur);\n      }\n    } else {\n      cur.setAttribute(key, currentElement.props[key]);\n    }\n  });\n  parentElement.appendChild(cur);\n};\n\nconst MyReactDOM = {\n  render\n};\nexport default MyReactDOM;","map":{"version":3,"sources":["/Users/jane/Desktop/LearnReact/cra_mounting/src/MyReact/MyReactDOM.js"],"names":["React","MyReact","render","currentElement","parentElement","currentTextNode","document","createTextNode","appendChild","type","prototype","Component","console","log","curInstance","props","parentDomElement","renderElement","cur","createElement","Object","keys","forEach","key","styleProp","style","setAttribute","classList","add","startsWith","curEvent","substring","toLowerCase","addEventListener","curchildren","Array","isArray","element","MyReactDOM"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport MyReact from \"./MyReact\"\n\n//Virtual DOM is JS object that helps you to update real DOM\nconst render=function(currentElement, parentElement){\n\n    if(typeof currentElement ==='string' ||\n     typeof currentElement ==='number'){\n        const currentTextNode = document.createTextNode(currentElement)\n        parentElement.appendChild(currentTextNode)\n        return\n    }\n\n    if(currentElement.type.prototype instanceof MyReact.Component){\n        console.log(currentElement.type.prototype instanceof MyReact.Component) // check if currentElement is the instance of React.Component\n        const curInstance = new currentElement.type(currentElement.props) // currentElement.type() is a class, add new at the beginning is instance // Invoking the constructor//Sending the props to currentElement\n        curInstance.parentDomElement = parentElement\n        const renderElement =curInstance.render()\n         \n        render(renderElement, parentElement) //Do recursion\n        return\n    }\n   \n    const cur = document.createElement(currentElement.type)\n\n    Object.keys(currentElement.props).forEach(key=>{\n        if(key==='style'){\n            Object.keys(currentElement.props[key]).forEach(styleProp=>{\n                cur.style[styleProp] = currentElement.props[key][styleProp]\n            })\n        }\n         else if(key==='id'){\n             cur.setAttribute(key, currentElement.props[key])\n         }\n        else if(key==='className'){\n            //add the value to the className\n            cur.classList.add(currentElement.props[key]) // key is variable \n        }else if (key.startsWith(\"on\")){\n            let curEvent = key.substring(2).toLowerCase()\n            //cur.addEventListener(key.substring(2).toLowerCase(), )\n            cur.addEventListener(curEvent, currentElement.props[key]); \n        }else if (key === 'children'){\n            const curchildren = currentElement.props[key]\n            if(Array.isArray(curchildren)){\n                curchildren.forEach((element)=>{\n                    render(element, cur)\n                })\n            }else if (typeof curchildren === 'string'){\n                const currentTextNode = document.createTextNode(curchildren)\n                cur.appendChild(currentTextNode)\n            }else{\n                render(curchildren, cur)\n            }\n            \n        \n        }else{\n            cur.setAttribute(key, currentElement.props[key])\n        }\n\n    })\n\n    parentElement.appendChild(cur)\n}\n\nconst MyReactDOM = {\n    render\n}\n\nexport default MyReactDOM"]},"metadata":{},"sourceType":"module"}